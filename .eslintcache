[{"D:\\WEB\\online-shop\\src\\index.js":"1","D:\\WEB\\online-shop\\src\\testModal.js":"2","D:\\WEB\\online-shop\\src\\testItem.js":"3"},{"size":415,"mtime":1612829369763,"results":"4","hashOfConfig":"5"},{"size":5165,"mtime":1612356661196,"results":"6","hashOfConfig":"5"},{"size":1913,"mtime":1611665348059,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"g69x6k",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\WEB\\online-shop\\src\\index.js",[],["17","18"],"D:\\WEB\\online-shop\\src\\testModal.js",["19"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport ReactModal from 'react-modal';\r\n\r\nReactModal.setAppElement('#login');\r\n\r\nconst customStyles = {\r\n    overlay: {\r\n        zIndex: 9999,\r\n        background: 'rgba(0, 0, 0, .5)',\r\n        animation: 'appear 350ms ease-in 1'\r\n\r\n    },\r\n    content: {\r\n        top                   : '50%',\r\n        left                  : '50%',\r\n        right                 : 'auto',\r\n        bottom                : 'auto',\r\n        // marginRight           : '-50%',\r\n        transform             : 'translate(-50%, -50%)',\r\n        borderRadius: '10px',\r\n        // transition: 'background .2s ease-in',\r\n        width: '350px'\r\n    }\r\n};\r\n\r\nexport default class TestModal extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            showModal: false,\r\n            isValid: false\r\n        };\r\n\r\n        this.handleOpenModal = this.handleOpenModal.bind(this);\r\n        this.handleCloseModal = this.handleCloseModal.bind(this);\r\n    }\r\n\r\n    handleOpenModal () {\r\n        this.setState({ showModal: true });\r\n    }\r\n\r\n    handleCloseModal () {\r\n        setTimeout(() => {\r\n            this.setState({ showModal: false });\r\n        }, 0)\r\n    }\r\n\r\n    // handleChange () {\r\n    //     if (typeof input[\"email\"] !== \"undefined\") {\r\n    //         const pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\r\n    //\r\n    //         if (!pattern.test(input[\"email\"])) {\r\n    //             this.setState({ isValid: false });\r\n    //                 errors[\"email\"] = \"Please enter valid email address.\";\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    render () {\r\n        return (\r\n            <div>\r\n                <a className={\"open\"} onClick={this.handleOpenModal}>Войти</a>\r\n                <ReactModal\r\n                    isOpen={this.state.showModal}\r\n                    // onAfterOpen={afterOpenModal}\r\n                    onRequestClose={this.handleCloseModal}\r\n                    style={customStyles}\r\n                    contentLabel=\"Modal window\"\r\n                    // className={\"modal\"}\r\n                    shouldFocusAfterRender={true}\r\n                    isValid={this.state.isValid}\r\n                >\r\n                    <div className={\"modal\"}>\r\n                        <div className={\"title\"}>\r\n                            <h2>Авторизация</h2>\r\n                            <span className={\"close\"} onClick={this.handleCloseModal}>&times;</span>\r\n                        </div>\r\n                            {/*<form action=\"#0\">*/}\r\n                                <div className={\"inputs\"}>\r\n                                    <input\r\n                                        required\r\n                                        type=\"email\"\r\n                                        id=\"email\"\r\n                                        name=\"email\"\r\n                                        // onChange={this.handleChange}\r\n                                        // placeholder=\"Логин или e-mail\"\r\n                                        placeholder=\" \"\r\n                                        className={\"inputText\"}\r\n                                    />\r\n                                    <span className=\"floating-label email\">Логин или e-mail</span>\r\n                                    <span className=\"wrong\">Некорректный e-mail</span>\r\n                                </div>\r\n                                <div className={\"inputs\"}>\r\n                                    <input\r\n                                        required\r\n                                        type=\"password\"\r\n                                        id=\"password\"\r\n                                        name=\"password\"\r\n                                        // onChange={this.handleChange}\r\n                                        // placeholder=\"Пароль\"\r\n                                        placeholder=\" \"\r\n                                        pattern=\"(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}\"\r\n                                        className={\"inputText\"}\r\n                                    />\r\n                                    <span className=\"floating-label password\">Пароль</span>\r\n                                    <span className=\"wrong\">Неправильный пароль</span>\r\n                                </div>\r\n                            {/*</form>*/}\r\n                        <div className={\"buttons\"}>\r\n                            <button onClick={this.handleCloseModal}>Войти</button>\r\n                            <button onClick={this.handleCloseModal}>Отмена</button>\r\n                        </div>\r\n                    </div>\r\n                </ReactModal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(<TestModal />, document.getElementById('login'))\r\n",["20","21"],"D:\\WEB\\online-shop\\src\\testItem.js",["22","23","24"],{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":63,"column":17,"nodeType":"31","endLine":63,"endColumn":70},{"ruleId":"25","replacedBy":"32"},{"ruleId":"27","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":8,"column":7,"nodeType":"36","messageId":"37","endLine":8,"endColumn":19},{"ruleId":"29","severity":1,"message":"38","line":34,"column":17,"nodeType":"31","endLine":34,"endColumn":51},{"ruleId":"29","severity":1,"message":"38","line":47,"column":21,"nodeType":"31","endLine":47,"endColumn":55},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["39"],["40"],"no-unused-vars","'customStyles' is assigned a value but never used.","Identifier","unusedVar","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]